/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mDEHsX1J3YSWVvMcFkMkt9
// Component: 7RlS78lREQJn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: wX4cqxiNHL1U/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: alyg4GEueul_/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: mDEHsX1J3YSWVvMcFkMkt9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: mDEHsX1J3YSWVvMcFkMkt9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: mDEHsX1J3YSWVvMcFkMkt9/projectcss
import sty from "./PlasmicRes.module.css"; // plasmic-import: 7RlS78lREQJn/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: MWa29Sm_yoVB/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: fn8qkSKZ1Ot9/icon

createPlasmicElementProxy;

export type PlasmicRes__VariantMembers = {};
export type PlasmicRes__VariantsArgs = {};
type VariantPropType = keyof PlasmicRes__VariantsArgs;
export const PlasmicRes__VariantProps = new Array<VariantPropType>();

export type PlasmicRes__ArgsType = {};
type ArgPropType = keyof PlasmicRes__ArgsType;
export const PlasmicRes__ArgProps = new Array<ArgPropType>();

export type PlasmicRes__OverridesType = {
  resultPage?: Flex__<"div">;
  h2?: Flex__<"h2">;
  h5?: Flex__<"h5">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultResProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRes__RenderFunc(props: {
  variants: PlasmicRes__VariantsArgs;
  args: PlasmicRes__ArgsType;
  overrides: PlasmicRes__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"resultPage"}
          data-plasmic-override={overrides.resultPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.resultPage
          )}
        >
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__btRhu
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {
                    "\u0646\u062a\u0627\u06cc\u062c \u0622\u0632\u0645\u0627\u06cc\u0634 \u062e\u0648\u0646 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \u0633\u0627\u062f\u06af\u06cc \u062a\u0641\u0633\u06cc\u0631 \u06a9\u0646\u06cc\u062f"
                  }
                </h2>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h1>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__dYo5
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  {
                    "\u062a\u062d\u0644\u06cc\u0644 \u0622\u0632\u0645\u0627\u06cc\u0634"
                  }
                </h5>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__flckf)}>
            {(() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__zd0Af)}
                onAbort={async event => {
                  const $steps = {};
                }}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___3Zr9G
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__enDr
                        )}
                      >
                        {
                          "\u0648\u0636\u0639\u06cc\u062a \u0642\u0646\u062f \u062e\u0648\u0646"
                        }
                      </h6>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button__icVbm)}
                  color={"warning"}
                  disabled={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tzd6Z
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.apiRequest.data["Glucose State"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Text";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  size={"extraLarge"}
                />

                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jycky
                      )}
                    >
                      {"Error fetching data"}
                    </div>
                  }
                  loadingDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a4Jgn
                      )}
                    >
                      {"Loading..."}
                    </div>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  params={(() => {
                    try {
                      return { id: $ctx.query.id };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "https://paziresh.app.n8n.cloud/webhook/eb9473ee-4a70-49a6-972d-e7e1ab7e228d"
                      : "https://paziresh.app.n8n.cloud/webhook-test/eb9473ee-4a70-49a6-972d-e7e1ab7e228d"
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sFkLu
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data["Glucose Description"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___0OPbo)}>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__t4UZd
              )}
            >
              {
                "\u0648\u0636\u0639\u06cc\u062a \u0686\u0631\u0628\u06cc \u062e\u0648\u0646"
              }
            </h6>
            <Button
              className={classNames("__wab_instance", sty.button__nbjDr)}
              color={"warning"}
              disabled={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mdMi9
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data["Cholesterol State"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              size={"extraLarge"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__haS5Y
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.apiRequest.data["Cholesterol Description"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zQXn)}>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__qd7R2
              )}
            >
              {"\u0639\u0645\u0644\u06a9\u0631\u062f \u06a9\u0628\u062f"}
            </h6>
            <Button
              className={classNames("__wab_instance", sty.button__qz6Qk)}
              color={"warning"}
              disabled={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ug8Z6
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data["Liver State"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              size={"extraLarge"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hjUet
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.apiRequest.data["Liver Description"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eRwBe)}>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__cOf6G
              )}
            >
              {"\u0639\u0645\u0644\u06a9\u0631\u062f \u06a9\u0644\u06cc\u0647"}
            </h6>
            <Button
              className={classNames("__wab_instance", sty.button__ffKbR)}
              color={"warning"}
              disabled={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8TLw1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data["Kidney State"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              size={"extraLarge"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8340T
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.apiRequest.data["Kidney Description"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jZhlb)}>
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__inb3D
              )}
            >
              {
                "\u0648\u0636\u0639\u06cc\u062a \u06a9\u0644\u06cc \u062e\u0648\u0646"
              }
            </h6>
            <Button
              className={classNames("__wab_instance", sty.button__wE4C8)}
              color={"warning"}
              disabled={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ff1Pv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data["CBC State"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              size={"extraLarge"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7NrDr
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.apiRequest.data["CBC Description"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  resultPage: ["resultPage", "h2", "h5", "apiRequest"],
  h2: ["h2"],
  h5: ["h5"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  resultPage: "div";
  h2: "h2";
  h5: "h5";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRes__VariantsArgs;
    args?: PlasmicRes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRes__ArgProps,
          internalVariantPropNames: PlasmicRes__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "resultPage") {
    func.displayName = "PlasmicRes";
  } else {
    func.displayName = `PlasmicRes.${nodeName}`;
  }
  return func;
}

export const PlasmicRes = Object.assign(
  // Top-level PlasmicRes renders the root element
  makeNodeComponent("resultPage"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    h5: makeNodeComponent("h5"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicRes
    internalVariantProps: PlasmicRes__VariantProps,
    internalArgProps: PlasmicRes__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRes;
/* prettier-ignore-end */
