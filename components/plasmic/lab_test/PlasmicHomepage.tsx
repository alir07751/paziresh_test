/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mDEHsX1J3YSWVvMcFkMkt9
// Component: xkbO757stMGy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: wX4cqxiNHL1U/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_8J7GhLNtJ6O4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8J7ghLNtJ6O4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mDEHsX1J3YSWVvMcFkMkt9/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: xkbO757stMGy/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: MWa29Sm_yoVB/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: fn8qkSKZ1Ot9/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  glo?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  input9?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  input11?: Flex__<typeof AntdInput>;
  input12?: Flex__<typeof AntdInput>;
  input13?: Flex__<typeof AntdInput>;
  input14?: Flex__<typeof AntdInput>;
  input15?: Flex__<typeof AntdInput>;
  input16?: Flex__<typeof AntdInput>;
  input17?: Flex__<typeof AntdInput>;
  input18?: Flex__<typeof AntdInput>;
  input19?: Flex__<typeof AntdInput>;
  input20?: Flex__<typeof AntdInput>;
  input21?: Flex__<typeof AntdInput>;
  input22?: Flex__<typeof AntdInput>;
  input23?: Flex__<typeof AntdInput>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "showResults",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    componentData: usePlasmicDataOp(() => {
      return {
        sourceId: "1AzyU4S4PrdrcaU5SzdxLe",
        opId: "fea0dd86-e092-4bf0-aefc-d6dcf0186889",
        userArgs: {},
        cacheKey: `plasmic.$.fea0dd86-e092-4bf0-aefc-d6dcf0186889.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8J7GhLNtJ6O4()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__ft23I)}>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wLuPv)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/lab_test/images/image3.png",
                  fullWidth: 600,
                  fullHeight: 87,
                  aspectRatio: undefined
                }}
              />
            ) : null}
          </section>
          <section className={classNames(projectcss.all, sty.section__wlXt)}>
            <div className={classNames(projectcss.all, sty.freeBox__raRSt)} />
          </section>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $state.showResults;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__mVNsj)}>
              <div
                data-plasmic-name={"glo"}
                data-plasmic-override={overrides.glo}
                className={classNames(projectcss.all, sty.glo)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ozK3T)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nOnnl)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__mYx0
                      )}
                    >
                      {
                        "\u0648\u0636\u0639\u06cc\u062a \u0642\u0646\u062f \u062e\u0648\u0646"
                      }
                    </h1>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__f3ECl
                      )}
                      color={"warning"}
                      disabled={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__twQxM
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.componentData.data[0][
                                  "Glucose State"
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Text";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oo2Pw
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.componentData.data[0][
                              "Glucose Description"
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062a\u062d\u0644\u06cc\u0644 \u0642\u0646\u062f \u062e\u0648\u0646 : \u062a\u0648\u0636\u06cc\u062d\u0627\u062a";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___12JN3)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__nveK2
                  )}
                >
                  {
                    "\u0648\u0636\u0639\u06cc\u062a \u0686\u0631\u0628\u06cc \u062e\u0648\u0646"
                  }
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button___1N3Vc)}
                  color={"warning"}
                  disabled={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a1Kmx
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.componentData.data[0][
                              "Cholesterol State"
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Text";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5G2ES
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.componentData.data[0][
                          "Cholesterol Description"
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u062d\u0644\u06cc\u0644 \u0642\u0646\u062f \u062e\u0648\u0646 : \u062a\u0648\u0636\u06cc\u062d\u0627\u062a";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__j7Es)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__lYuhL
                  )}
                >
                  {
                    "\u0639\u0645\u0644\u06a9\u0631\u062f \u06a9\u0644\u06cc\u0647"
                  }
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button__iBtPo)}
                  color={"warning"}
                  disabled={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tpd9M
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.componentData.data[0][
                              "Kidney State"
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Text";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                />

                <Button
                  className={classNames("__wab_instance", sty.button__xg7L)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pFdly
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.componentData.data[0][
                          "Kidney Description"
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u062d\u0644\u06cc\u0644 \u0642\u0646\u062f \u062e\u0648\u0646 : \u062a\u0648\u0636\u06cc\u062d\u0627\u062a";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pHhzZ)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__oViD
                  )}
                >
                  {"\u0639\u0645\u0644\u06a9\u0631\u062f \u06a9\u0628\u062f"}
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button__cmDkg)}
                  color={"warning"}
                  disabled={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Tr9
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.componentData.data[0][
                              "Liver State"
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Text";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jX19
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.componentData.data[0][
                          "Liver Description"
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u062d\u0644\u06cc\u0644 \u0642\u0646\u062f \u062e\u0648\u0646 : \u062a\u0648\u0636\u06cc\u062d\u0627\u062a";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__azxiq)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__hCdG4
                  )}
                >
                  {
                    "\u0648\u0636\u0639\u0628\u062a \u06a9\u0644\u06cc \u062e\u0648\u0646"
                  }
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button__gJj6U)}
                  color={"warning"}
                  disabled={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vQh7
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.componentData.data[0]["CBC State"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Text";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pLz3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.componentData.data[0][
                          "CBC Description"
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u062d\u0644\u06cc\u0644 \u0642\u0646\u062f \u062e\u0648\u0646 : \u062a\u0648\u0636\u06cc\u062d\u0627\u062a";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__arhMh)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jxNxV
                      )}
                    >
                      {
                        "\u062b\u0628\u062a \u0622\u0632\u0645\u0627\u06cc\u0634 \u062c\u062f\u06cc\u062f"
                      }
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateShowResults"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showResults"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowResults"] != null &&
                      typeof $steps["updateShowResults"] === "object" &&
                      typeof $steps["updateShowResults"].then === "function"
                    ) {
                      $steps["updateShowResults"] = await $steps[
                        "updateShowResults"
                      ];
                    }
                  }}
                />
              </div>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return !$state.showResults;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__l88BM)}>
              <div className={classNames(projectcss.all, sty.freeBox__eg99N)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xzS7Q)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/lab_test/images/image5.png",
                    fullWidth: 526,
                    fullHeight: 113,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__upZcT
                )}
              >
                {
                  "\u0646\u062a\u0627\u06cc\u062c \u0622\u0632\u0645\u0627\u06cc\u0634 \u062e\u0648\u0646 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \u0633\u0627\u062f\u06af\u06cc \u062a\u0641\u0633\u06cc\u0631 \u06a9\u0646\u06cc\u062f"
                }
              </h1>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__iL6L8
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                }
              </h1>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["n8NApi"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://yacasop123.app.n8n.cloud/webhook-test/39b6be6a-ecdf-470b-95f3-f24f36c3621e",
                              (() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.form.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["n8NApi"] != null &&
                      typeof $steps["n8NApi"] === "object" &&
                      typeof $steps["n8NApi"].then === "function"
                    ) {
                      $steps["n8NApi"] = await $steps["n8NApi"];
                    }

                    $steps["showResults"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showResults"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["showResults"] != null &&
                      typeof $steps["showResults"] === "object" &&
                      typeof $steps["showResults"].then === "function"
                    ) {
                      $steps["showResults"] = await $steps["showResults"];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___1ScXy
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gpc6F
                          )}
                        >
                          {"\u0646\u0627\u0645"}
                        </div>
                      }
                      name={"Name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ni1Zj
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__euMrR
                          )}
                        >
                          {
                            "\u0646\u0627\u0645\u200c\u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                          }
                        </div>
                      }
                      name={"LastName"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input2", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___16MTf
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hKzJ6
                          )}
                        >
                          {"\u0627\u06cc\u0645\u06cc\u0644"}
                        </div>
                      }
                      name={"Email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input3", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__vkvz6
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v01G
                          )}
                        >
                          {"\u0633\u0646"}
                        </div>
                      }
                      name={"Age"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__sv8YZ
                      )}
                      initialValue={undefined}
                      label={"Potassium"}
                      name={"Potassium"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input5", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ntzPw
                      )}
                      initialValue={undefined}
                      label={"BUN"}
                      name={"BUN"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input6", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__e2Xbg
                      )}
                      initialValue={undefined}
                      label={"Triglycerides"}
                      name={"Triglycerides"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input7", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__rjulY
                      )}
                      initialValue={undefined}
                      label={"Hemoglobin"}
                      name={"Hemoglobin"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input8", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__o4Rro
                      )}
                      initialValue={undefined}
                      label={"ALT"}
                      name={"ALT"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input9),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input9", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nW7Jw
                      )}
                      initialValue={undefined}
                      label={"Platelets"}
                      name={"Platelets"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input10),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input10", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__uoCd
                      )}
                      initialValue={undefined}
                      label={"WBC"}
                      name={"WBC"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input11),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input11", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input11.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input11"}
                            data-plasmic-override={overrides.input11}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__x5HpW
                      )}
                      initialValue={undefined}
                      label={"HDL Cholesterol"}
                      name={"HDL Cholesterol"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input12),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input12", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input12",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input12.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input12"}
                            data-plasmic-override={overrides.input12}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__pjpW
                      )}
                      initialValue={undefined}
                      label={"Lymphocytes"}
                      name={"Lymphocytes"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input13),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input13", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input13",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input13.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input13"}
                            data-plasmic-override={overrides.input13}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__wy7Fb
                      )}
                      initialValue={undefined}
                      label={"Neutrophils"}
                      name={"Neutrophils"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input14),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input14", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input14",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input14.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input14"}
                            data-plasmic-override={overrides.input14}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dQZx8
                      )}
                      initialValue={undefined}
                      label={"AST"}
                      name={"AST"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input15),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input15", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input15",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input15.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input15"}
                            data-plasmic-override={overrides.input15}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xkCs
                      )}
                      initialValue={undefined}
                      label={"Hematocrit"}
                      name={"Hematocrit"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input16),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input16", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input16",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input16.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input16"}
                            data-plasmic-override={overrides.input16}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___9Lul0
                      )}
                      hidden={true}
                      initialValue={undefined}
                      label={"ID"}
                      name={"ID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input17),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input17", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input17",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input17.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input17"}
                            data-plasmic-override={overrides.input17}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nTaj
                      )}
                      initialValue={undefined}
                      label={"Creatinine"}
                      name={"Creatinine"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input18),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input18", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input18",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input18.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input18"}
                            data-plasmic-override={overrides.input18}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__hw7Wy
                      )}
                      initialValue={undefined}
                      label={"Sodium"}
                      name={"Sodium"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input19),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input19", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input19",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input19.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input19"}
                            data-plasmic-override={overrides.input19}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__zbZlT
                      )}
                      hidden={true}
                      initialValue={undefined}
                      label={"Created"}
                      name={"Created"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input20),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input20", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input20",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input20.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input20"}
                            data-plasmic-override={overrides.input20}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__cYxHl
                      )}
                      initialValue={undefined}
                      label={"Total Cholesterol"}
                      name={"Total Cholesterol"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input21),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input21", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input21",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input21.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input21"}
                            data-plasmic-override={overrides.input21}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dcm2Q
                      )}
                      initialValue={undefined}
                      label={"LDL Cholesterol"}
                      name={"LDL Cholesterol"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input22),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input22", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input22",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input22.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input22"}
                            data-plasmic-override={overrides.input22}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___6Xzt
                      )}
                      initialValue={undefined}
                      label={"Glucose"}
                      name={"Glucose"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input23),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input23", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input23",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input23.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input23"}
                            data-plasmic-override={overrides.input23}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__hzVoF
                      )}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1CZqt
                        )}
                      >
                        {
                          "\u062a\u062d\u0644\u06cc\u0644 \u0622\u0632\u0645\u0627\u06cc\u0634"
                        }
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "glo",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "input10",
    "input11",
    "input12",
    "input13",
    "input14",
    "input15",
    "input16",
    "input17",
    "input18",
    "input19",
    "input20",
    "input21",
    "input22",
    "input23"
  ],
  glo: ["glo"],
  form: [
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "input10",
    "input11",
    "input12",
    "input13",
    "input14",
    "input15",
    "input16",
    "input17",
    "input18",
    "input19",
    "input20",
    "input21",
    "input22",
    "input23"
  ],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  input8: ["input8"],
  input9: ["input9"],
  input10: ["input10"],
  input11: ["input11"],
  input12: ["input12"],
  input13: ["input13"],
  input14: ["input14"],
  input15: ["input15"],
  input16: ["input16"],
  input17: ["input17"],
  input18: ["input18"],
  input19: ["input19"],
  input20: ["input20"],
  input21: ["input21"],
  input22: ["input22"],
  input23: ["input23"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  glo: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  input9: typeof AntdInput;
  input10: typeof AntdInput;
  input11: typeof AntdInput;
  input12: typeof AntdInput;
  input13: typeof AntdInput;
  input14: typeof AntdInput;
  input15: typeof AntdInput;
  input16: typeof AntdInput;
  input17: typeof AntdInput;
  input18: typeof AntdInput;
  input19: typeof AntdInput;
  input20: typeof AntdInput;
  input21: typeof AntdInput;
  input22: typeof AntdInput;
  input23: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    glo: makeNodeComponent("glo"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    input11: makeNodeComponent("input11"),
    input12: makeNodeComponent("input12"),
    input13: makeNodeComponent("input13"),
    input14: makeNodeComponent("input14"),
    input15: makeNodeComponent("input15"),
    input16: makeNodeComponent("input16"),
    input17: makeNodeComponent("input17"),
    input18: makeNodeComponent("input18"),
    input19: makeNodeComponent("input19"),
    input20: makeNodeComponent("input20"),
    input21: makeNodeComponent("input21"),
    input22: makeNodeComponent("input22"),
    input23: makeNodeComponent("input23"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
