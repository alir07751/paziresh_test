/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mDEHsX1J3YSWVvMcFkMkt9
// Component: uigk3RmWP41n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: wX4cqxiNHL1U/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mDEHsX1J3YSWVvMcFkMkt9/projectcss
import sty from "./PlasmicHomepage4.module.css"; // plasmic-import: uigk3RmWP41n/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: MWa29Sm_yoVB/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: fn8qkSKZ1Ot9/icon

createPlasmicElementProxy;

export type PlasmicHomepage4__VariantMembers = {};
export type PlasmicHomepage4__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage4__VariantsArgs;
export const PlasmicHomepage4__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage4__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage4__ArgsType;
export const PlasmicHomepage4__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage4__OverridesType = {
  resultPage?: Flex__<"div">;
  section?: Flex__<"section">;
  h2?: Flex__<"h2">;
  h5?: Flex__<"h5">;
  h6?: Flex__<"h6">;
};

export interface DefaultHomepage4Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage4__RenderFunc(props: {
  variants: PlasmicHomepage4__VariantsArgs;
  args: PlasmicHomepage4__ArgsType;
  overrides: PlasmicHomepage4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "sWUWR1R5HBjF9i39X7CU7X",
        opId: "9049f95b-0771-47b7-bfe8-58474231250e",
        userArgs: {},
        cacheKey: `plasmic.$.9049f95b-0771-47b7-bfe8-58474231250e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"resultPage"}
          data-plasmic-override={overrides.resultPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.resultPage
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__bM4M2)}
              displayHeight={"89px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/lab_test/images/image.png",
                fullWidth: 2992,
                fullHeight: 161,
                aspectRatio: undefined
              }}
            />
          </section>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__gk6E5)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/lab_test/images/image2.png",
              fullWidth: 562,
              fullHeight: 208,
              aspectRatio: undefined
            }}
          />

          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__w2Dcr
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {
                    "\u0646\u062a\u0627\u06cc\u062c \u0622\u0632\u0645\u0627\u06cc\u0634 \u062e\u0648\u0646 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647 \u0633\u0627\u062f\u06af\u06cc \u062a\u0641\u0633\u06cc\u0631 \u06a9\u0646\u06cc\u062f"
                  }
                </h2>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c7QAj
            )}
          >
            {
              "\u0628\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0622\u0632\u0645\u0627\u06cc\u0634 \u062e\u0648\u0646 \u062e\u0648\u062f\u060c \u062a\u0641\u0633\u06cc\u0631\u06cc \u0633\u0631\u06cc\u0639\u060c \u062f\u0642\u06cc\u0642 \u0648 \u0627\u0648\u0644\u06cc\u0647 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f"
            }
          </div>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__an4Ki
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  {
                    "\u062a\u062d\u0644\u06cc\u0644 \u0622\u0632\u0645\u0627\u06cc\u0634"
                  }
                </h5>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </h1>
          <div className={classNames(projectcss.all, sty.freeBox__x1GNd)}>
            <div className={classNames(projectcss.all, sty.freeBox__eb2Xt)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__wBfEb
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6
                      )}
                    >
                      {
                        "\u0648\u0636\u0639\u06cc\u062a \u0686\u0631\u0628\u06cc \u062e\u0648\u0646"
                      }
                    </h6>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </h1>
              <Button
                className={classNames("__wab_instance", sty.button__w0WyV)}
                color={"warning"}
                disabled={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wummg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data[0]["Cholesterol State"];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Text";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                size={"extraLarge"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2RIr3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0]["Cholesterol Description"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__f2X86)}>
            <Button
              className={classNames("__wab_instance", sty.button__pNlo9)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qMcWz
                  )}
                >
                  {"\u0642\u0628\u0644\u06cc"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage3"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-3` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage3"] != null &&
                  typeof $steps["goToHomepage3"] === "object" &&
                  typeof $steps["goToHomepage3"].then === "function"
                ) {
                  $steps["goToHomepage3"] = await $steps["goToHomepage3"];
                }
              }}
            />

            <Button
              className={classNames("__wab_instance", sty.button__pmDtM)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7E84C
                  )}
                >
                  {"\u0628\u0639\u062f\u06cc"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage5"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page-5` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage5"] != null &&
                  typeof $steps["goToHomepage5"] === "object" &&
                  typeof $steps["goToHomepage5"].then === "function"
                ) {
                  $steps["goToHomepage5"] = await $steps["goToHomepage5"];
                }
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  resultPage: ["resultPage", "section", "h2", "h5", "h6"],
  section: ["section"],
  h2: ["h2"],
  h5: ["h5"],
  h6: ["h6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  resultPage: "div";
  section: "section";
  h2: "h2";
  h5: "h5";
  h6: "h6";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage4__VariantsArgs;
    args?: PlasmicHomepage4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage4__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage4__ArgProps,
          internalVariantPropNames: PlasmicHomepage4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "resultPage") {
    func.displayName = "PlasmicHomepage4";
  } else {
    func.displayName = `PlasmicHomepage4.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage4 = Object.assign(
  // Top-level PlasmicHomepage4 renders the root element
  makeNodeComponent("resultPage"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    h5: makeNodeComponent("h5"),
    h6: makeNodeComponent("h6"),

    // Metadata about props expected for PlasmicHomepage4
    internalVariantProps: PlasmicHomepage4__VariantProps,
    internalArgProps: PlasmicHomepage4__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage4;
/* prettier-ignore-end */
